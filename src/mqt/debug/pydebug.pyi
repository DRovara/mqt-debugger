from collections.abc import Callable

# Enums
class Result:
    OK: Result
    ERROR: Result

class VariableType:
    VarBool: VariableType
    VarInt: VariableType
    VarFloat: VariableType

# Classes
class VariableValue:
    bool_value: bool
    int_value: int
    float_value: float

    def __init__(self) -> None: ...

class Variable:
    name: str
    type: VariableType
    value: VariableValue

    def __init__(self) -> None: ...

class Complex:
    real: float
    imaginary: float

    def __init__(self) -> None: ...

class Statevector:
    num_qubits: int
    num_states: int
    amplitudes: list[Complex]

    def __init__(self) -> None: ...

class SimulationState:
    init: Callable[[SimulationState], Result] | None
    load_code: Callable[[SimulationState, str], Result] | None
    step_forward: Callable[[SimulationState], Result] | None
    step_over_forward: Callable[[SimulationState], Result] | None
    step_backward: Callable[[SimulationState], Result] | None
    step_over_backward: Callable[[SimulationState], Result] | None
    run_simulation: Callable[[SimulationState], Result] | None
    reset_simulation: Callable[[SimulationState], Result] | None
    can_step_forward: Callable[[SimulationState], bool] | None
    can_step_backward: Callable[[SimulationState], bool] | None
    is_finished: Callable[[SimulationState], bool] | None
    did_assertion_fail: Callable[[SimulationState], bool] | None
    get_current_instruction: Callable[[SimulationState], int] | None
    get_previous_instruction: Callable[[SimulationState], int] | None
    get_instruction_count: Callable[[SimulationState], int] | None
    get_instruction_position: Callable[[SimulationState, int, int | None, int | None], Result] | None
    get_num_qubits: Callable[[SimulationState], int] | None
    get_amplitude_index: Callable[[SimulationState, int, Complex], Result] | None
    get_amplitude_bitstring: Callable[[SimulationState, str, Complex], Result] | None
    get_classical_variable: Callable[[SimulationState, str, Variable], Result] | None
    get_state_vector_full: Callable[[SimulationState, Statevector], Result] | None
    get_state_vector_sub: Callable[[SimulationState, int, list[int], Statevector], Result] | None
    get_data_dependencies: Callable[[SimulationState, int, list[bool]], Result] | None

    def __init__(self) -> None: ...
    def call_init(self) -> None: ...
    def call_load_code(self, code: str) -> None: ...
    def call_step_forward(self) -> None: ...
    def call_step_over_forward(self) -> None: ...
    def call_step_backward(self) -> None: ...
    def call_step_over_backward(self) -> None: ...
    def call_run_simulation(self) -> None: ...
    def call_reset_simulation(self) -> None: ...
    def call_can_step_forward(self) -> bool: ...
    def call_can_step_backward(self) -> bool: ...
    def call_is_finished(self) -> bool: ...
    def call_did_assertion_fail(self) -> bool: ...
    def call_get_current_instruction(self) -> str: ...
    def call_get_previous_instruction(self) -> str: ...
    def call_get_instruction_count(self) -> int: ...
    def call_get_instruction_position(self, instruction: int, start: int | None, end: int | None) -> None: ...
    def call_get_num_qubits(self) -> int: ...
    def call_get_amplitude_index(self, qubit: int, output: Complex) -> None: ...
    def call_get_amplitude_bitstring(self, bitstring: str, output: Complex) -> None: ...
    def call_get_classical_variable(self, name: str, output: Variable) -> None: ...
    def call_get_state_vector_full(self, output: Statevector) -> None: ...
    def call_get_state_vector_sub(self, sub_state_size: int, qubits: list[int], output: Statevector) -> None: ...
    def call_get_data_dependencies(self, instruction: int, instructions: list[bool]) -> None: ...

def create_ddsim_simulation_state() -> SimulationState: ...
def destroy_ddsim_simulation_state(state: SimulationState) -> None: ...
